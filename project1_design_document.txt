            +--------------------+
            |       CS 311       |
            | PROJECT 1: THREADS |
            |   DESIGN DOCUMENT  |
            +--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Minh Duc Nguyen (20202026) <ducnm@unist.ac.kr>
Thu Phuong Nguyen (20202027) <phuongnt@unist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

> In threads.h, added:
int64_t wakeup_tick;    /* Tick till wake up */
int64_t get_min_sleep_tick(void); /* The minimum sleep ticks */
void thread_sleep (int64_t);    /* Move the current thread to the sleep queue. */
void thread_wakeup(int64_t);    /* Find a sleeping thread and move it to ready queue */

> In threads.c, added:
static struct list sleep_list;      /* List of processes in THREAD_SLEEP state (processes are sleeping). */
static int64_t min_sleep_ticks;     /* The minimum sleep ticks */
static void reset_min_sleep_tick(void);     /* Reset the minimum sleep ticks to infinity */
#define min(x, y) (((x) < (y))? (x) : (y))  /* Find min between 2 variables. */
#define minimize(x, y) x = min(x, y)    /* Find the min between 2 variables and then assign to the first variable. */


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

1. First, record the current timer tick count (start).
2. Assert that interrupts are enabled, ensuring that the system can respond to timer interrupts. (Disable interrupts.)
3. If the elapsed time since the start of the timer is less than the specified number of ticks, it proceeds with actual sleep, delegating the task to thread_sleep(start + ticks).
4. Moves the current thread to the sleep queue (sleep_list) with the associated wakeup tick.
5. Block the thread.

When timer_interrupt() handler is invoked: 
1. At each timer tick, it increments the global tick count (ticks).
2. Check sleep list and the global tick, find any threads to wake up,
3. If so, it invokes thread_wakeup(ticks) to move them to the ready list.
4. Unblock them.
5. After waking up any threads, updates the global tick.


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
+ Using linked list sleep_list, selectively wakes up threads only when necessary, and efficiently tracks the next earliest wakeup time using get_min_sleep_tick(). 
+ Interrupts are briefly disabled during critical sections to ensure thread safety and prevent race conditions.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
+ Interrupts are temporarily disabled during critical sections to prevent preemption and ensure that the current thread can complete its operation without interference.
+ Access to shared data such as sleep queue (sleep_list) is synchronized to prevent multiple threads from concurrently modifying them.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
 + During the execution of critical sections in timer_sleep(), interrupts are disabled to prevent timer_interrupt() from being invoked and potentially interfering with the synchronization process.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
+ By utilizing linked list (sleep_list) and selectively waking up threads only when necessary, the system avoids busy waiting and optimizes resource utilization.
+ Synchronization such as locks and disabling interrupts during critical sections ensures thread safety and prevents race conditions ==> multiple threads to safely call timer_sleep() simultaneously without risking data corruption or inconsistent behavior.




             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?